import sys
import cv2
import numpy as np
import torch
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import BufferedInputFile
from PIL import Image, ExifTags
from io import BytesIO

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TELEGRAM_TOKEN = '8069108234:AAGw7NdWRFcaX3LOXrg3HPuHoMXpdAcqcAI'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é YOLOv7
local_repo = r'E:\PyCharmProjects\ZooSaveMain\yolov7'
sys.path.insert(0, local_repo)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Model –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è YOLOv7
try:
    from models.yolo import Model
except ImportError:
    raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å Model –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è YOLOv7.")

# –†–∞–∑—Ä–µ—à–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–ª–∞—Å—Å–∞ models.yolo.Model
torch.serialization.add_safe_globals({'models.yolo.Model': Model})

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É (checkpoint) –≤—Ä—É—á–Ω—É—é
checkpoint = torch.load(r'E:\PyCharmProjects\ZooSaveMain\yolov7.pt',
                        map_location=torch.device('cpu'),
                        weights_only=False)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLOv7 –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
model = torch.hub.load(local_repo, 'custom', checkpoint, source='local', force_reload=True)
model.eval()


def preprocess_image(image):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    if image is not None and len(image.shape) == 3:
        if image.shape[2] == 4:
            image = cv2.cvtColor(image, cv2.COLOR_BGRA2BGR)
    return image


def draw_boxes(image, detections, confidence_threshold=0.5):
    """
    –†–∏—Å—É–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –¥–µ—Ç–µ–∫—Ü–∏–∏.
    """
    for _, row in detections.iterrows():
        conf = row['confidence']
        if conf >= confidence_threshold:
            x_min, y_min, x_max, y_max = int(row['xmin']), int(row['ymin']), int(row['xmax']), int(row['ymax'])
            label = row['name']
            cv2.rectangle(image, (x_min, y_min), (x_max, y_max), (0, 255, 0), 2)
            text = f"{label} {conf:.2f}"
            cv2.putText(image, text, (x_min, y_min - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
    return image


def detect_bird(image, confidence_threshold=0.5):
    """
    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é YOLOv7.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - True, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ç–∏—Ü–∞.
    - False, –µ—Å–ª–∏ –ø—Ç–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    image = preprocess_image(image)
    img_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = model(img_rgb)
    detections = results.pandas().xyxy[0]

    for _, row in detections.iterrows():
        cls = row['name'].lower()
        conf = row['confidence']
        if conf >= confidence_threshold and cls == "bird":
            logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ç–∏—Ü–∞: {row}")
            return True  # –ù–∞–π–¥–µ–Ω–∞ –ø—Ç–∏—Ü–∞
    return False  # –ü—Ç–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞


@dp.message(F.text == "/start")
async def send_welcome(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π.
    """
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ç–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ. üê¶üì∏\n\n"
        "üìå *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?*\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.\n"
        "2Ô∏è‚É£ –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
        "3Ô∏è‚É£ –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ç–∏—Ü–∞ ‚Äî —Å–æ–æ–±—â—É –≤–∞–º –æ–± —ç—Ç–æ–º –∏ –ø–æ–∫–∞–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n"
        "4Ô∏è‚É£ –ï—Å–ª–∏ –ø—Ç–∏—Ü—ã –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Ñ–æ—Ç–æ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –¥—Ä—É–≥–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.\n\n"
        "üì∏ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    )
    await message.reply(welcome_text, parse_mode="Markdown")


@dp.message(F.content_type == "photo")
async def handle_photo(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:
    - –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    - –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é —Å –ø–æ–º–æ—â—å—é YOLOv7.
    - –†–∏—Å—É–µ—Ç bounding boxes –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ.
    """
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    data_io = await bot.download_file(file_info.file_path)
    data = data_io.getvalue()

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    np_arr = np.frombuffer(data, np.uint8)
    img = cv2.imdecode(np_arr, cv2.IMREAD_UNCHANGED)
    if img is None:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
    bird_detected = detect_bird(img)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ —Ä–∏—Å—É–µ–º bounding boxes
    img_for_detection = cv2.cvtColor(preprocess_image(img), cv2.COLOR_BGR2RGB)
    detection_results = model(img_for_detection).pandas().xyxy[0]
    img_with_boxes = draw_boxes(img.copy(), detection_results)

    # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    success, encoded_image = cv2.imencode('.jpg', img_with_boxes)
    if not success:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ BufferedInputFile
    photo_bytes = BufferedInputFile(encoded_image.tobytes(), filename="result.jpg")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    if bird_detected:
        await message.reply_photo(photo=photo_bytes, caption="‚úÖ –ü—Ç–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞! üê¶")
    else:
        await message.reply_photo(photo=photo_bytes, caption="‚ùå –ù–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç –ø—Ç–∏—Ü")


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
